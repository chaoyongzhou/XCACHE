#! /bin/bash
### BEGIN INIT INFO
# Provides:        xfs
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop:    0 1 6
# Short-Description: xfs
### END INIT INFO

#chkconfig: 2345 70 30
#description: XFS servers

###############################################################################
#
#   Copyright (C) Chaoyong Zhou
#   Email: bgnvendor@163.com
#   QQ: 2796796
#
################################################################################

#source /etc/rc.d/init.d/functions

g_debug_switch=off
g_verbose_switch=off

# recycle deleted xfs files and dirs
g_xfs_recycle_nfile_per_loop=1000 # recycle xfs file and dir num per time

# retire aging xfs files
g_xfs_retire_nfile_once=1000 # retire xfs file num per time
g_xfs_garbage_max_num=100 # retire expired locked-files num per time

g_xfs_installed_dir=/usr/local/xfs
g_xfs_bin_dir=${g_xfs_installed_dir}/bin
g_xfs_log_dir=/data/proclog/log/xfs
g_xfs_cfg_xml=/usr/local/xfs/bin/config.xml
g_xfs_cfg_scanner=/usr/local/xfs/bin/xfs_cfg_scan.pl

g_xfs_main_exe=${g_xfs_bin_dir}/xfs
g_xfs_tool_exe=${g_xfs_bin_dir}/xfs_tool

g_cache_dir_top=/data/cache
g_cache_dir_prefix=${g_cache_dir_top}/rnode
g_ssd_dir_prefix=${g_cache_dir_top}/ssd
g_disk_num=$(ls -l ${g_cache_dir_prefix}* | wc -l)
g_disk_max=12 # support up to 12 data disks

g_xfs_ports=618-629 #default xfs port range
g_ngx_ports=818-829,838-849,858-869,878-889 #default ngx port range
#g_srv_ip_addr=127.0.0.1
#g_srv_ip_addr=10.63.101.59,127.0.0.1
g_srv_ip_addr=$(ifconfig eth0 | grep inet | grep netmask | awk '{print $2}') # local net address

# type,tcid,maski,maske,srvport,csrvport,srvipaddr,cluster(s)
g_tasks_cfg_list=(
$(/usr/bin/perl ${g_xfs_cfg_scanner} config=${g_xfs_cfg_xml} tag=xfs ips="${g_srv_ip_addr},127.0.0.1" ports="${g_xfs_ports}" | head -${g_disk_num})
$(/usr/bin/perl ${g_xfs_cfg_scanner} config=${g_xfs_cfg_xml} tag=ngx ips="all" ports="${g_ngx_ports}")
)

# ngx worker is running or not.
# note: always regard remote ngx worker is running
# csrvport,srvipaddr,<status>
g_ngx_worker_list=()

###############################################################################
# USAGE
###############################################################################
function usage()
{
    echo ""
    echo ""
    echo " usage: $0"
    echo ""
    echo "    start      [<1-12>|<tcid list>]      # start xfs servers by scan data cache dir ${g_cache_dir_top} or start specific xfs server with rnode id"
    echo "    restart    [<1-12>|<tcid list>]      # restart xfs servers by scan data cache dir ${g_cache_dir_top} or restart specific xfs server with rnode id"
    echo "    retrieve   [<1-12>|<tcid list>]      # retrieve xfs servers by scan data cache dir ${g_cache_dir_top} or retrieve specific xfs server with rnode id"
    echo "    stop       [<1-12>|<tcid list>]      # stop xfs servers with xfs closing and shutdown or stop specific xfs server with rnode id"
    echo "    status     [<1-12>|<tcid list>]      # some or all xfs server(s) status"
    echo "    monitor    [<1-12>|<tcid list>]      # monitor some or all xfs server(s) status. notify ngx bgn if anyone down"
    echo "    activate   [<1-12>|<tcid list>]      # activate some or all xfs server(s) status. notify ngx bgn that xfs is up"
    echo "    deactivate [<1-12>|<tcid list>]      # deactivate some or all xfs server(s) status. notify ngx bgn that xfs is down"
    echo "    stat       [<1-12>|<tcid list>]      # statistics of some or all xfs server(s)."
    echo "    rotate     [<1-12>|<tcid list>]      # rotate log on some or all xfs"
    echo "    recycle    [<1-12>|<tcid list>]      # recycle some or all xfs deleted space"
    echo "    garbage    [<1-12>|<tcid list>]      # retire expired locked files of some or all xfs"
    echo "    flush      [<1-12>|<tcid list>]      # flush some or all xfs to disk"
    echo "    retire     [<1-12>|<tcid list>]      # retire aging files of some or all xfs"
    echo "    breathe    [<1-12>|<tcid list>]      # memory breathing on some or all xfs"
    echo "    actsyscfg  [<1-12>|<tcid list>]      # activate system configure on some or all xfs"
    echo "    status_np  [<1-12>|<tcid list>]      # namenode status on some or all xfs"
    echo "    status_dn  [<1-12>|<tcid list>]      # datanode status on some or all xfs"
    echo "    paracfg    [<1-12>|<tcid list>]      # show paracfg on some or all xfs"
    echo ""
    echo " e.g."
    echo "    service xfs start"
    echo "    service xfs start 1"
    echo "    service xfs start 1,3,5"
    echo ""
    echo ""
}

##############################################
# status dn on some xfs
##############################################
function status_dn_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_nothing
                echo_info "status_dn in XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_nothing
                echo_info "status_dn in XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            status_dn_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_nothing
                echo_info "status_dn in XFS ${tcid} ... done"
            else
                echo_nothing
                echo_info "status_dn in XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# status np on some xfs
##############################################
function status_np_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "status_np in XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "status_np in XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            status_np_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "status_np in XFS ${tcid} ... done"
            else
                echo_info "status_np in XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}


##############################################
# garbage on some xfs
##############################################
function garbage_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "garbage expired locked-files in XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "garbage in XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            garbage_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "garbage expired locked-files in XFS ${tcid} ... done"
            else
                echo_info "garbage expired locked-files in XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}


##############################################
# rotate log on some xfs
##############################################
function rotate_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "rotate XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "rotate XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            rotate_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "rotate XFS ${tcid} ... done"
            else
                echo_info "rotate XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}


##############################################
# memory breathing on some xfs
##############################################
function breathe_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "breathe XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "breathe XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            breathe_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "breathe XFS ${tcid} ... done"
            else
                echo_info "breathe XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}


##############################################
# retire on some xfs
##############################################
function retire_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "retire XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "retire XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            retire_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "retire XFS ${tcid} ... done"
            else
                echo_info "retire XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# flush on some xfs
##############################################
function flush_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "flush XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "flush XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            flush_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "flush XFS ${tcid} ... done"
            else
                echo_info "flush XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# recycle on some xfs
##############################################
function recycle_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "recycle XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "recycle XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            recycle_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "recycle XFS ${tcid} ... done"
            else
                echo_info "recycle XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# obtain status of some xfs
##############################################
function status_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            status_one_xfs ${tcid}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... running"
            else
                echo_info "XFS ${tcid} ... stopped"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# monitor some xfs and notify ngx bgn if down
##############################################
function monitor_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local port

    rnode_id_list=$1
    tcid_list=$1

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

#            check_one_xfs_is_running ${tcid}
#            if [ $? -ne 0 ]; then
#                echo_info "XFS ${tcid} ... stopped"
#
#                disk_idx=$(expr ${disk_idx} + 1)
#                continue
#            fi

            monitor_one_xfs ${tcid} ${ip} ${port}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... up"
            else
                echo_info "XFS ${tcid} ... down"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# activate some xfs and notify ngx bgn
##############################################
function activate_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    rnode_id_list=$1
    tcid_list=$1

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            activate_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
            echo_info "XFS ${tcid} ... activated"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# deactivate some xfs and notify ngx bgn
##############################################
function deactivate_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    rnode_id_list=$1
    tcid_list=$1

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            deactivate_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
            echo_info "XFS ${tcid} ... deactivated"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# stat of some xfs
##############################################
function stat_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    rnode_id_list=$1
    tcid_list=$1

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            stat_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# paracfg of some xfs
##############################################
function paracfg_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    rnode_id_list=$1
    tcid_list=$1

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            paracfg_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}


##############################################
# stop some xfs
##############################################
function stop_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "stop XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "stop XFS ${tcid} ... stopped"
                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            stop_one_xfs ${tcid} ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "stop XFS ${tcid} ... done"
            else
                echo_info "stop XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# start some xfs
##############################################
function start_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    local cache_dir
    local ssd_dir

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "start XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            cache_dir=${g_cache_dir_prefix}${disk_idx}
            ssd_dir=${g_ssd_dir_prefix}${disk_idx}
            start_one_xfs ${tcid} ${cache_dir} ${ssd_dir}
            if [ $? -eq 0 ]; then
                echo_info "start XFS ${tcid} ... done"
            else
                echo_info "start XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# retrieve some xfs
##############################################
function retrieve_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    local cache_dir
    local ssd_dir

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "retrieve XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            cache_dir=${g_cache_dir_prefix}${disk_idx}
            ssd_dir=${g_ssd_dir_prefix}${disk_idx}
            retrieve_one_xfs ${tcid} ${cache_dir} ${ssd_dir}
            if [ $? -eq 0 ]; then
                echo_info "retrieve XFS ${tcid} ... done"
            else
                echo_info "retrieve XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# activate system configure on some xfs
##############################################
function actsyscfg_some_xfs()
{
    local rnode_id_list
    local tcid_list
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    rnode_id_list=$1
    tcid_list=$1

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_idx_is_in_rnode_id_list ${disk_idx} ${rnode_id_list} || check_tcid_is_in_tcid_list ${tcid} ${tcid_list}
        if [ $? -eq 0 ]; then
            check_disk_ignored ${disk_idx}
            if [ $? -eq 0 ]; then
                echo_info "actsyscfg XFS ${tcid} ... ignore"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            check_one_xfs_is_running ${tcid}
            if [ $? -ne 0 ]; then
                echo_info "actsyscfg XFS ${tcid} ... stopped"

                disk_idx=$(expr ${disk_idx} + 1)
                continue
            fi

            actsyscfg_one_xfs ${tcid} ${port}
            if [ $? -eq 0 ]; then
                echo_info "actsyscfg XFS ${tcid} ... done"
            else
                echo_info "actsyscfg XFS ${tcid} ... failed"
            fi
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# check disk_idx in rnode_id_list
# rnode_id_list e.g. 1,3,5
##############################################
function check_disk_idx_is_in_rnode_id_list()
{
    local disk_idx
    local rnode_id_list_str
    local rnode_id_list
    local rnode_id

    disk_idx=$1
    rnode_id_list_str=$2

    OLD_IFS="$IFS"
    IFS="," # delim
    rnode_id_list=(${rnode_id_list_str})
    IFS="$OLD_IFS"

    for rnode_id in ${rnode_id_list[*]}
    do
        #echo_debug "[DEBUG] check_disk_idx_is_in_rnode_id_list: rnode_id ${rnode_id}"
        if [ "${rnode_id}" == "${disk_idx}" ]; then
            echo_debug "[DEBUG] check_disk_idx_is_in_rnode_id_list: ${disk_idx} in ${rnode_id_list_str}"
            return 0 # succ
        fi
    done

    echo_debug "[DEBUG] check_disk_idx_is_in_rnode_id_list: ${disk_idx} not in ${rnode_id_list_str}"
    return 1 # fail
}

##############################################
# check tcid in tcid_list
# tcid_list e.g. 10.10.67.18,10.10.67.20
##############################################
function check_tcid_is_in_tcid_list()
{
    local tcid
    local tcid_list_str
    local tcid_list_list
    local tcid_t

    tcid=$1
    tcid_list_str=$2

    OLD_IFS="$IFS"
    IFS="," # delim
    tcid_list_list=(${tcid_list_str})
    IFS="$OLD_IFS"

    for tcid_t in ${tcid_list_list[*]}
    do
        if [ "${tcid_t}" == "${tcid}" ]; then
            echo_debug "[DEBUG] check_tcid_is_in_tcid_list: ${tcid} in ${tcid_list_str}"
            return 0 # succ
        fi
    done

    echo_debug "[DEBUG] check_tcid_is_in_tcid_list: ${tcid} not in ${tcid_list_str}"
    return 1 # fail
}

##############################################
# status dn on all xfs
##############################################
function status_dn_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "status_dn XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "status_dn XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        status_dn_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "status_dn XFS ${tcid} ... succ"
        else
            echo_info "status_dn XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# status np on all xfs
##############################################
function status_np_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "status_np XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "status_np XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        status_np_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "status_np XFS ${tcid} ... succ"
        else
            echo_info "status_np XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# garbage on all xfs
##############################################
function garbage_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "garbage XFS ${tcid} ... ignore"
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "garbage XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        garbage_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "garbage XFS ${tcid} ... succ"
        else
            echo_info "garbage XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# rotate log on all xfs
##############################################
function rotate_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "rotate XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "rotate XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        rotate_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "rotate XFS ${tcid} ... succ"
        else
            echo_info "rotate XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# memory breathing on all xfs
##############################################
function breathe_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "breathe XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "breathe XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        breathe_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "breathe XFS ${tcid} ... succ"
        else
            echo_info "breathe XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# retire on all xfs
##############################################
function retire_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "retire XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "retire XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        retire_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "retire XFS ${tcid} ... succ"
        else
            echo_info "retire XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# flush on all xfs
##############################################
function flush_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "flush XFS ${tcid} ... ignore"
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "flush XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        flush_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "flush XFS ${tcid} ... succ"
        else
            echo_info "flush XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# recycle on all xfs
##############################################
function recycle_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "recycle XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "recycle XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        recycle_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "recycle XFS ${tcid} ... succ"
        else
            echo_info "recycle XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# obtain status of all xfs
##############################################
function status_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... ignore"
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

#        check_one_xfs_is_running ${tcid}
#        if [ $? -ne 0 ]; then
#            echo_info "XFS ${tcid} ... stopped"
#
#             disk_idx=$(expr ${disk_idx} + 1)
#             continue
#        fi

        status_one_xfs ${tcid}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... running"
        else
            echo_info "XFS ${tcid} ... stopped"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# monitor all xfs and notify ngx bgn if down
##############################################
function monitor_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local port

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        monitor_one_xfs ${tcid} ${ip} ${port}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... up"
        else
            echo_info "XFS ${tcid} ... down"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# activate all xfs and notify ngx bgn
##############################################
function activate_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        activate_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
        echo_info "XFS ${tcid} ... activated"

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# deactivate all xfs and notify ngx bgn
##############################################
function deactivate_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        deactivate_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}
        echo_info "XFS ${tcid} ... deactivated"

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# stat of all xfs
##############################################
function stat_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        stat_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# paracfg of all xfs
##############################################
function paracfg_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local ip
    local bgn_port
    local rest_port

    collect_all_ngx_worker_status

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        bgn_port=$(echo ${cfg_line} | cut -d, -f 5) # bgn port
        rest_port=$(echo ${cfg_line} | cut -d, -f 6) # rest port
        ip=$(echo ${cfg_line} | cut -d, -f 7)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        paracfg_one_xfs ${tcid} ${ip} ${bgn_port} ${rest_port}

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# stop all xfs
##############################################
function stop_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "stop XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "stop XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        stop_one_xfs ${tcid} ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "stop XFS ${tcid} ... done"
        else
            echo_info "stop XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# start all xfs
##############################################
function start_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local cache_dir
    local ssd_dir
    local tcid

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "start XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        cache_dir=${g_cache_dir_prefix}${disk_idx}
        ssd_dir=${g_ssd_dir_prefix}${disk_idx}

        start_one_xfs ${tcid} ${cache_dir} ${ssd_dir}
        if [ $? -ne 0 ]; then
            echo_info "start XFS ${tcid} ... failed"
        else
            echo_info "start XFS ${tcid} ... done"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# retrieve all xfs
##############################################
function retrieve_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local cache_dir
    local ssd_dir
    local tcid

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "retrieve XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        cache_dir=${g_cache_dir_prefix}${disk_idx}
        ssd_dir=${g_ssd_dir_prefix}${disk_idx}

        retrieve_one_xfs ${tcid} ${cache_dir} ${ssd_dir}
        if [ $? -ne 0 ]; then
            echo_info "retrieve XFS ${tcid} ... failed"
        else
            echo_info "retrieve XFS ${tcid} ... done"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# activate system configure on all xfs
##############################################
function actsyscfg_all_xfs()
{
    local disk_idx
    local cfg_line
    local cfg_type
    local tcid
    local port

    disk_idx=1
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'xfs' ]; then
            continue
        fi

        if [ ${disk_idx} -gt ${g_disk_num} ]; then
            break
        fi

        tcid=$(echo ${cfg_line} | cut -d, -f 2)
        port=$(echo ${cfg_line} | cut -d, -f 6)

        check_disk_ignored ${disk_idx}
        if [ $? -eq 0 ]; then
            echo_info "actsyscfg XFS ${tcid} ... ignore"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        check_one_xfs_is_running ${tcid}
        if [ $? -ne 0 ]; then
            echo_info "actsyscfg XFS ${tcid} ... stopped"

            disk_idx=$(expr ${disk_idx} + 1)
            continue
        fi

        actsyscfg_one_xfs ${tcid} ${port}
        if [ $? -eq 0 ]; then
            echo_info "actsyscfg XFS ${tcid} ... succ"
        else
            echo_info "actsyscfg XFS ${tcid} ... failed"
        fi

        disk_idx=$(expr ${disk_idx} + 1)
    done
    return 0
}

##############################################
# status dn on one xfs
##############################################
function status_dn_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up status_dn due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep status_dn | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:status_dn is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -sv "http://127.0.0.1:${port}/?mod=xfs&op=status_dn"
    fi

    return 0 # status_dn succ
}

##############################################
# status np on one xfs
##############################################
function status_np_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up status_np due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep status_np | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:status_np is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -sv "http://127.0.0.1:${port}/?mod=xfs&op=status_np"
    fi

    return 0 # status_np succ
}

##############################################
# garbage on one xfs
##############################################
function garbage_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up garbage due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep locked_file_retire | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:locked_file_retire is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=locked_file_retire" \
            -H "retire-max-num:${g_xfs_garbage_max_num}" > /dev/null 2>&1

        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=wait_file_retire" \
            -H "retire-max-num:${g_xfs_garbage_max_num}" > /dev/null 2>&1            
    fi

    return 0 # garbage succ
}

##############################################
# rotate log on one xfs
##############################################
function rotate_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up rotate due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep logrotate | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:logrotate is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        # default rotate log is LOGUSER08
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=logrotate" -H "log-index:8"
    fi

    return 0 # rotate succ
}

##############################################
# memory breathing on one xfs
##############################################
function breathe_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up breathe due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep breathe | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:breathe is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=breathe"
    fi

    return 0 # breathe succ
}

##############################################
# retire on one xfs
##############################################
function retire_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up retire due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep retire | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:retire is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=retire" \
            -H "retire-files:${g_xfs_retire_nfile_once}"
    fi

    return 0 # retire succ
}

##############################################
# flush on one xfs
##############################################
function flush_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up flush due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep flush | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:flush is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=flush" 2>/dev/null
    fi

    return 0 # flush succ
}

##############################################
# recycle on one xfs
##############################################
function recycle_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

#    check_one_xfs_is_running ${tcid}
#    if [ $? -ne 0 ]; then
#        return 1 # give up recycle due to its stopped
#    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep recycle | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:recycle is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=recycle" \
            -H "max-num-per-np:${g_xfs_recycle_nfile_per_loop}"
    fi
    return 0 # recycle succ
}

##############################################
# obtain status of one xfs
##############################################
function status_one_xfs()
{
    local tcid

    tcid=$1

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        return 1 # is stopped
    fi

    return 0 # is running
}

##############################################
# monitor one xfs and notify ngx bgn if down
##############################################
function monitor_one_xfs()
{
    local tcid
    local ip
    local port

    tcid=$1
    ip=$2
    port=$3

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        notify_all_ngx_xfs_down ${tcid} ${ip} ${port}
        return 1 # is down
    fi

    notify_all_ngx_xfs_up ${tcid} ${ip} ${port}
    return 0 # is up
}

##############################################
# activate one xfs and notify ngx bgn if up
##############################################
function activate_one_xfs()
{
    local xfs_tcid
    local xfs_ip
    local xfs_bgn_port
    local xfs_rest_port

    xfs_tcid=$1
    xfs_ip=$2
    xfs_bgn_port=$3
    xfs_rest_port=$4

    #notify_all_ngx_xfs_up ${xfs_tcid} ${xfs_ip} ${xfs_bgn_port}

    echo_debug "[DEBUG] activate_one_xfs: notify xfs ${xfs_tcid} is up"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://${xfs_ip}:${xfs_rest_port}/?mod=xfs&op=activate" 2>/dev/null &
    fi

    return 0;
}

##############################################
# deactivate one xfs and notify ngx bgn if down
##############################################
function deactivate_one_xfs()
{
    local xfs_tcid
    local xfs_ip
    local xfs_bgn_port
    local xfs_rest_port

    xfs_tcid=$1
    xfs_ip=$2
    xfs_bgn_port=$3
    xfs_rest_port=$4

    #notify_all_ngx_xfs_down ${xfs_tcid} ${xfs_ip} ${xfs_bgn_port}

    echo_debug "[DEBUG] deactivate_one_xfs: notify xfs ${xfs_tcid} is down"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://${xfs_ip}:${xfs_rest_port}/?mod=xfs&op=deactivate" 2>/dev/null &
    fi
    return 0;
}

##############################################
# statistics of one xfs
##############################################
function stat_one_xfs()
{
    local xfs_tcid
    local xfs_ip
    local xfs_bgn_port
    local xfs_rest_port

    xfs_tcid=$1
    xfs_ip=$2
    xfs_bgn_port=$3
    xfs_rest_port=$4

    echo_debug "[DEBUG] stat_one_xfs: stat of xfs ${xfs_tcid}"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -sv "http://${xfs_ip}:${xfs_rest_port}/?mod=xfs&op=stat"
    fi

    return 0;
}

##############################################
# paracfgistics of one xfs
##############################################
function paracfg_one_xfs()
{
    local xfs_tcid
    local xfs_ip
    local xfs_bgn_port
    local xfs_rest_port

    xfs_tcid=$1
    xfs_ip=$2
    xfs_bgn_port=$3
    xfs_rest_port=$4

    echo_debug "[DEBUG] paracfg_one_xfs: paracfg of xfs ${xfs_tcid}"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -sv "http://${xfs_ip}:${xfs_rest_port}/?mod=xfs&op=paracfg"
    fi

    return 0;
}

##############################################
# stop one xfs
##############################################
function stop_one_xfs()
{
    local tcid
    local disk_idx
    local rnode

    tcid=$1
    disk_idx=$2

    rnode=rnode${disk_idx}

    if [ ${g_verbose_switch} == 'on' ]; then
        return 0  # xfs not started, return succ
    fi

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        return 0  # xfs not started, return succ
    fi

    systemctl stop xfs@${rnode}

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        return 0  # xfs not exit, return succ
    fi

    return 1 # fail
}

##############################################
# start one xfs
##############################################
function start_one_xfs()
{
    local tcid
    local rnode_dir
    local ssd_dir
    local rnode

    tcid=$1
    rnode_dir=$2
    ssd_dir=$3

    rnode=$(basename ${rnode_dir})

    echo_debug "[DEBUG] start_one_xfs: tcid ${tcid}, rnode_dir ${rnode_dir}, ssd_dir ${ssd_dir}"

    if [ ${g_verbose_switch} == 'on' ]; then
        echo_debug "[DEBUG] start_one_xfs: XFS ${tcid} start cmd: ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -xfs_ssd_path ${ssd_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -d"
        echo_debug "[DEBUG] start_one_xfs: XFS ${tcid} start succ"
        return 0 # succ
    fi

    check_one_xfs_is_running ${tcid}
    if [ $? -eq 0 ]; then
        echo_debug "[DEBUG] start_one_xfs: XFS ${tcid} is already running"
        return 0 # succ
    fi

    systemctl start xfs@${rnode}
    if [ $? -ne 0 ]; then
        echo_error "error:start_one_xfs: XFS ${tcid} start failed"
        echo_error "error:start_one_xfs: XFS ${tcid} start cmd: ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -xfs_ssd_path ${ssd_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -d"
        return 1 # fail
    fi

    sleep 1 # fuck due to fork

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        echo_debug "[DEBUG] start_one_xfs: XFS ${tcid} is not running"
        return 1 # fail
    fi

    echo_debug "[DEBUG] start_one_xfs: XFS ${tcid} start succ"
    return 0 # succ
}

##############################################
# retrieve one xfs
##############################################
function retrieve_one_xfs()
{
    local tcid
    local rnode_dir
    local ssd_dir

    tcid=$1
    rnode_dir=$2
    ssd_dir=$3

    echo_debug "[DEBUG] retrieve_one_xfs: tcid ${tcid}, rnode_dir ${rnode_dir}, ssd_dir ${ssd_dir}"

    if [ ${g_verbose_switch} == 'on' ]; then
        echo_debug "[DEBUG] retrieve_one_xfs: XFS ${tcid} retrieve succ"
        return 0 # succ
    fi

    check_one_xfs_is_running ${tcid}
    if [ $? -eq 0 ]; then
        echo_debug "[DEBUG] retrieve_one_xfs: XFS ${tcid} is already running"
        return 0 # succ
    fi

    if [ ! -L "${rnode_dir}" ]; then
        echo_error "error:retrieve_one_xfs: ${rnode_dir} is not link file => ignore"
        return 1 # fail
    fi

    if [ -L "${ssd_dir}" ]; then # has ssd
        ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -xfs_ssd_path ${ssd_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -retrieve -d &
        if [ $? -ne 0 ]; then
            echo_error "error:retrieve_one_xfs: XFS ${tcid} retrieve failed"
            echo_error "error:retrieve_one_xfs: XFS ${tcid} retrieve cmd: ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -xfs_ssd_path ${ssd_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -retrieve -d"
            return 1 # fail
        fi
    else # no ssd
        ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -retrieve -d &
        if [ $? -ne 0 ]; then
            echo_error "error:retrieve_one_xfs: XFS ${tcid} retrieve failed"
            echo_error "error:retrieve_one_xfs: XFS ${tcid} retrieve cmd: ${g_xfs_main_exe} -tcid ${tcid} -node_type xfs -xfs_sata_path ${rnode_dir} -logp ${g_xfs_log_dir} -sconfig ${g_xfs_cfg_xml} -retrieve -d"
            return 1 # fail
        fi
    fi

    sleep 1 # fuck due to fork

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        echo_debug "[DEBUG] retrieve_one_xfs: XFS ${tcid} is not running"
        return 1 # fail
    fi

    echo_debug "[DEBUG] retrieve_one_xfs: XFS ${tcid} retrieve succ"
    return 0 # succ
}

##############################################
# activate system configure on one xfs
##############################################
function actsyscfg_one_xfs()
{
    local tcid
    local port
    local ret

    tcid=$1
    port=$2

    echo_debug "[DEBUG] actsyscfg_one_xfs: tcid ${tcid}, port ${port}"

    check_one_xfs_is_running ${tcid}
    if [ $? -ne 0 ]; then
        echo_debug "[DEBUG] actsyscfg_one_xfs: XFS ${tcid} is not running"
        return 1 # fail
    fi

    # confirm no same command is running
    ret=$(ps -ef | grep xfs | grep actsyscfg | grep ":${port}" | grep -v grep | wc -l)
    if [ ${ret} -ne 0 ]; then
        echo_error "error:actsyscfg is working on port ${port}"
        return 1  # fail
    fi

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://127.0.0.1:${port}/?mod=xfs&op=actsyscfg"
    fi

    return 0 # succ
}

##############################################
# check one rnode exist or not
##############################################
function check_one_rnode_is_existing()
{
    local rnode_id
    local cache_dir

    rnode_id=$1
    cache_dir=${g_cache_dir_prefix}${rnode_id}

    if [ ! -L ${cache_dir} ]; then
        return 1 # fail
    fi

    return 0 # succ
}

##############################################
# check one xfs running or not
##############################################
function check_one_xfs_is_running()
{
    local tcid
    local ret

    tcid=$1
    echo_debug "[DEBUG] check_one_xfs_is_running: tcid = ${tcid}"

    ret=$(ps -ef | grep xfs | grep "\-node_type xfs" | grep "\-tcid ${tcid}" | grep -v grep | wc -l)
    if [ ${ret} -eq 0 ]; then
        return 1  # fail
    fi
    return 0 # succ
}

##############################################
# collect all ngx worker status (running or not)
##############################################
function collect_all_ngx_worker_status()
{
    local ngx_netstat
    local cfg_line
    local cfg_type
    local ip
    local port
    local idx
    local ret

    ngx_netstat=$(netstat -nltp | grep nginx | grep -v grep)

    idx=0
    for cfg_line in ${g_tasks_cfg_list[*]}
    do
        cfg_type=$(echo ${cfg_line} | cut -d, -f 1)
        if [ ${cfg_type} != 'ngx' ]; then
            continue
        fi

        port=$(echo ${cfg_line} | cut -d, -f 6)
        ip=$(echo ${cfg_line} | cut -d, -f 7)
        if [ "${ip}" == "${g_srv_ip_addr}" -o "${ip}" == "127.0.0.1" ]; then
            ret=$(echo ${ngx_netstat} | grep ":${port} " | wc -l)
            if [ ${ret} -eq 0 ]; then
                # local ngx worker is stopped
                echo_debug "[DEBUG] collect_all_ngx_worker_status: local ngx ${ip}:${port} is stopped"
                g_ngx_worker_list[ $idx ]="ngx,${port},${ip},stopped"
            else
                # local ngx worker is running
                echo_debug "[DEBUG] collect_all_ngx_worker_status: local ngx ${ip}:${port} is running"
                g_ngx_worker_list[ $idx ]="ngx,${port},${ip},running"
            fi
        else
            # remote ngx worker is running
            echo_debug "[DEBUG] collect_all_ngx_worker_status: remote ngx ${ip}:${port} is running"
            g_ngx_worker_list[ $idx ]="ngx,${port},${ip},running"
        fi

        idx=$(expr $idx + 1)
    done

    return 0
}

##############################################
# check one ngx worker running or not
##############################################
function check_one_ngx_is_running()
{
    local ngx_ip
    local ngx_port
    local ngx_worker
    local node_type
    local node_ip
    local node_port
    local node_status

    local ret

    ngx_ip=$1
    ngx_port=$2

    for ngx_worker in ${g_ngx_worker_list[*]}
    do
        node_type=$(echo ${ngx_worker} | cut -d, -f 1)
        if [ ${node_type} != 'ngx' ]; then
            continue
        fi

        node_port=$(echo ${ngx_worker} | cut -d, -f 2)
        node_ip=$(echo ${ngx_worker} | cut -d, -f 3)
        node_status=$(echo ${ngx_worker} | cut -d, -f 4)

        if [ ${node_status} == "stopped" ]; then
            echo_debug "[DEBUG] check_one_ngx_is_running: ngx ${ngx_ip}:${ngx_port} is stopped"
            return 1 # stopped
        fi
        echo_debug "[DEBUG] check_one_ngx_is_running: ngx ${ngx_ip}:${ngx_port} is running"
        return 0 # running
    done

    echo_debug "[DEBUG] check_one_ngx_is_running: * ngx ${ngx_ip}:${port} is stopped"
    return 1 # stopped
}

##############################################
# notify all ngx bgn that xfs is down
##############################################
function notify_all_ngx_xfs_down()
{
    local xfs_tcid
    local xfs_ip
    local xfs_port
    local node_type
    local node_ip
    local node_port
    local node_status

    local ret

    xfs_tcid=$1
    xfs_ip=$2
    xfs_port=$3

    for ngx_worker in ${g_ngx_worker_list[*]}
    do
        node_type=$(echo ${ngx_worker} | cut -d, -f 1)
        if [ ${node_type} != 'ngx' ]; then
            continue
        fi

        node_port=$(echo ${ngx_worker} | cut -d, -f 2)
        node_ip=$(echo ${ngx_worker} | cut -d, -f 3)
        node_status=$(echo ${ngx_worker} | cut -d, -f 4)

        if [ ${node_status} == "stopped" ]; then
            echo_debug "[DEBUG] notify_all_ngx_xfs_down: ngx ${node_ip}:${node_port} is stopped"
            continue
        fi

        echo_debug "[DEBUG] notify_all_ngx_xfs_down: ngx ${node_ip}:${node_port} is running"

        notify_one_ngx_xfs_down ${xfs_tcid} ${xfs_ip} ${xfs_port} ${node_ip} ${node_port}
    done

    return 0
}

##############################################
# notify one ngx bgn that xfs is down
##############################################
function notify_one_ngx_xfs_down()
{
    local xfs_tcid
    local xfs_ip
    local xfs_port
    local ngx_ip
    local ngx_port
    local ret

    xfs_tcid=$1
    xfs_ip=$2
    xfs_port=$3
    ngx_ip=$4
    ngx_port=$5

    if [ "${ngx_ip}" == "${g_srv_ip_addr}" -o "${ngx_ip}" == "127.0.0.1" ]; then
        # confirm no same command is running
        ret=$(ps -ef | grep ngx | grep xfs_down | grep ":${ngx_port}" | grep -v grep | wc -l)
        if [ ${ret} -ne 0 ]; then
            echo_error "error:xfs_down is working on port ${ngx_port}"
            return 1  # fail
        fi
    fi

    echo_debug "[DEBUG] notify_one_ngx_xfs_down: notify ngx ${ngx_ip}:${ngx_port}: xfs ${xfs_tcid} is down"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://${ngx_ip}:${ngx_port}/?mod=ngx&op=xfs_down" \
            -H "xfs-tcid:${xfs_tcid}" -H "xfs-ip:${xfs_ip}" -H "xfs-port:${xfs_port}" 2>/dev/null &
    fi

    return 0 # notify succ
}

##############################################
# notify all ngx bgn that xfs is up
##############################################
function notify_all_ngx_xfs_up()
{
    local xfs_tcid
    local xfs_ip
    local xfs_port
    local node_type
    local node_ip
    local node_port
    local node_status

    local ret

    xfs_tcid=$1
    xfs_ip=$2
    xfs_port=$3

    for ngx_worker in ${g_ngx_worker_list[*]}
    do
        node_type=$(echo ${ngx_worker} | cut -d, -f 1)
        if [ ${node_type} != 'ngx' ]; then
            continue
        fi

        node_port=$(echo ${ngx_worker} | cut -d, -f 2)
        node_ip=$(echo ${ngx_worker} | cut -d, -f 3)
        node_status=$(echo ${ngx_worker} | cut -d, -f 4)

        if [ ${node_status} == "stopped" ]; then
            echo_debug "[DEBUG] notify_all_ngx_xfs_up: ngx ${node_ip}:${node_port} is stopped"
            continue
        fi

        echo_debug "[DEBUG] notify_all_ngx_xfs_up: ngx ${node_ip}:${node_port} is running"

        notify_one_ngx_xfs_up ${xfs_tcid} ${xfs_ip} ${xfs_port} ${node_ip} ${node_port}
    done

    return 0
}

##############################################
# notify one ngx bgn that xfs is up
##############################################
function notify_one_ngx_xfs_up()
{
    local xfs_tcid
    local xfs_ip
    local xfs_port
    local ngx_ip
    local ngx_port
    local ret

    xfs_tcid=$1
    xfs_ip=$2
    xfs_port=$3
    ngx_ip=$4
    ngx_port=$5

    if [ "${ngx_ip}" == "${g_srv_ip_addr}" -o "${ngx_ip}" == "127.0.0.1" ]; then
        # confirm no same command is running
        ret=$(ps -ef | grep ngx | grep xfs_up | grep ":${ngx_port}" | grep -v grep | wc -l)
        if [ ${ret} -ne 0 ]; then
            echo_error "error:xfs_up is working on ngx_port ${ngx_port}"
            return 1  # fail
        fi
    fi

    echo_debug "[DEBUG] notify_one_ngx_xfs_up: notify ngx ${ngx_ip}:${ngx_port}: xfs ${xfs_tcid} is up"

    if [ ${g_verbose_switch} == 'off' ]; then
        curl -svo /dev/null "http://${ngx_ip}:${ngx_port}/?mod=ngx&op=xfs_up" \
            -H "xfs-tcid:${xfs_tcid}" -H "xfs-ip:${xfs_ip}" -H "xfs-port:${xfs_port}" 2>/dev/null &
    fi

    return 0 # notify succ
}


##############################################
# count the num of data disks
##############################################
function count_data_disk_num()
{
    local disk_idx
    local cache_dir

    echo_debug "[DEBUG] count_data_disk_num: g_disk_max: ${g_disk_max}"

    disk_idx=1
    while [ ${disk_idx} -le ${g_disk_max} ];
    do
        cache_dir=${g_cache_dir_prefix}${disk_idx}
#        if [ -f ${cache_dir} ]; then
#            echo_debug "[DEBUG] count_data_disk_num: ${cache_dir} is file => ignore"
#            disk_idx=$(expr ${disk_idx} + 1)
#            continue
#        fi

        if [ ! -L ${cache_dir} ]; then
            if [ ! -f ${cache_dir} -a ! -b ${cache_dir} ]; then
                echo_debug "[DEBUG] count_data_disk_num: not found ${cache_dir}"
                break
            fi

            # file or block
        fi

        echo_debug "[DEBUG] count_data_disk_num: found ${cache_dir}"
        disk_idx=$(expr ${disk_idx} + 1)
    done

    g_disk_num=$(expr ${disk_idx} - 1)
    echo_debug "[DEBUG] count_data_disk_num: count disk num: ${g_disk_num}"
    return 0
}

##############################################
# check disk could be ignored or not
##############################################
function check_disk_ignored()
{
    local disk_idx
    local cache_dir
    local file_size

    disk_idx=$1
    cache_dir=${g_cache_dir_prefix}${disk_idx}

#    if [ -f ${cache_dir} ]; then
#        file_size=$(ls -l ${cache_dir} 2>/dev/null | awk '{print $5}')
#        if [ ${file_size} -eq 0 ]; then
#            echo_debug "[DEBUG] check_disk_ignored: ${cache_dir} is empty file => ignore"
#            return 0 # ignore
#        fi
#    fi

    if [ ! -L ${cache_dir} ]; then
        echo_debug "[DEBUG] check_disk_ignored: ${cache_dir} is not link => ignore"
        return 0 # ignore
    fi

    echo_debug "[DEBUG] check_disk_ignored: ${cache_dir} is link => not ignore"
    return 1 # not ignore
}

##############################################
# echo debug info if debug switch on
##############################################
function echo_debug()
{
    if [ ${g_debug_switch} == 'on' ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    fi
    return 0
}

##############################################
# echo error info
##############################################
function echo_error()
{
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    return 0
}

##############################################
# echo general info
##############################################
function echo_info()
{
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    return 0
}

##############################################
# echo empty line
##############################################
function echo_nothing()
{
    echo
    return 0
}

##############################################
# main entry
##############################################
function main_all()
{
    local cmd_op
    local ret

    cmd_op=$1

    case "${cmd_op}" in
        start)
            start_all_xfs
            ret=$?
            ;;
        retrieve)
            retrieve_all_xfs
            ret=$?
            ;;
        stop)
            stop_all_xfs
            ret=$?
            ;;
        restart)
            stop_all_xfs && start_all_xfs
            ret=$?
            ;;
        status)
            status_all_xfs
            ret=$?
            ;;
        monitor)
            monitor_all_xfs
            ret=$?
            ;;
        activate)
            activate_all_xfs
            ret=$?
            ;;
        deactivate)
            deactivate_all_xfs
            ret=$?
            ;;
        stat)
            stat_all_xfs
            ret=$?
            ;;
        paracfg)
            paracfg_all_xfs
            ret=$?
            ;;
        garbage)
            garbage_all_xfs
            ret=$?
            ;;
        status_np)
            status_np_all_xfs
            ret=$?
            ;;
        status_dn)
            status_dn_all_xfs
            ret=$?
            ;;
        rotate)
            rotate_all_xfs
            ret=$?
            ;;
        recycle)
            recycle_all_xfs
            ret=$?
            ;;
        flush)
            flush_all_xfs
            ret=$?
            ;;
        retire)
            retire_all_xfs
            ret=$?
            ;;
        breathe)
            breathe_all_xfs
            ret=$?
            ;;
        actsyscfg)
            actsyscfg_all_xfs
            ret=$?
            ;;
        *)
            usage
            ret=1
            ;;
    esac

    return ${ret}
}

function main_some()
{
    local cmd_op
    local cmd_paras
    local ret

    cmd_op=$1
    cmd_paras=$2

    case "${cmd_op}" in
    start)
        start_some_xfs ${cmd_paras}
        ret=$?
        ;;
    retrieve)
        retrieve_some_xfs ${cmd_paras}
        ret=$?
        ;;
    stop)
        stop_some_xfs ${cmd_paras}
        ret=$?
        ;;
    restart)
        stop_some_xfs ${cmd_paras} && start_some_xfs ${cmd_paras}
        ret=$?
        ;;
    status)
        status_some_xfs ${cmd_paras}
        ret=$?
        ;;
    monitor)
        monitor_some_xfs ${cmd_paras}
        ret=$?
        ;;
    activate)
        activate_some_xfs ${cmd_paras}
        ret=$?
        ;;
    deactivate)
        deactivate_some_xfs ${cmd_paras}
        ret=$?
        ;;
    stat)
        stat_some_xfs ${cmd_paras}
        ret=$?
        ;;
    paracfg)
        paracfg_some_xfs ${cmd_paras}
        ret=$?
        ;;
    garbage)
        garbage_some_xfs ${cmd_paras}
        ret=$?
        ;;
    status_np)
        status_np_some_xfs ${cmd_paras}
        ret=$?
        ;;
    status_dn)
        status_dn_some_xfs ${cmd_paras}
        ret=$?
        ;;
    rotate)
        rotate_some_xfs ${cmd_paras}
        ret=$?
        ;;
    recycle)
        recycle_some_xfs ${cmd_paras}
        ret=$?
        ;;
    flush)
        flush_some_xfs ${cmd_paras}
        ret=$?
        ;;
    retire)
        retire_some_xfs ${cmd_paras}
        ret=$?
        ;;
    breathe)
        breathe_some_xfs ${cmd_paras}
        ret=$?
        ;;
    actsyscfg)
        actsyscfg_some_xfs ${cmd_paras}
        ret=$?
        ;;
    *)
        usage
        ret=1
        ;;
    esac

    return ${ret}
}

##############################################
# interactive command line
##############################################
if [ $# -eq 1 ]; then
    count_data_disk_num
    main_all $1
    exit $?
fi

if [ $# -eq 2 ]; then
    count_data_disk_num
    main_some $1 $2
    exit $?
fi

usage
exit 1
